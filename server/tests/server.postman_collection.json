{
	"info": {
		"_postman_id": "3a8fbf1c-0996-4892-9036-246c297a871e",
		"name": "GameReview - Postman Test Script",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29744231",
		"_collection_link": "https://winter-desert-178755.postman.co/workspace/New-Team-Workspace~c6c3752b-41d8-46c5-86c6-7e02ec2a4854/collection/29744231-3a8fbf1c-0996-4892-9036-246c297a871e?action=share&source=collection_link&creator=29744231"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "User 1: william",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"william_id\", pm.response.json()._id);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).username)\r",
											"    .to.be.equal(pm.response.json().username);\r",
											"})\r",
											"\r",
											"pm.test(\"Password is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).password)\r",
											"    .to.be.equal(pm.response.json().password);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"william\",\r\n    \"password\": \"good_password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 2: lenaaa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"lenaaa_id\", pm.response.json()._id);\r",
											"pm.globals.set(\"lenaaa_username\", pm.response.json().username);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"lenaaa\",\r\n    \"password\": \"hejthisismypassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 3: bobson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"bobson_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"bobson\",\r\n    \"password\": \"bobs_password\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: username too short",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"short\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: username too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"abcde12345abcde12345\",\r\n    \"password\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: no username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"1\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: duplicate username (william)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"william\",\r\n    \"password\": \"not_good_password123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: no password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"notshort\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns all (3) users\", function () {\r",
											"    pm.expect(pm.response.json().users.length).to.be.equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"User received by query is correct\", function () {\r",
											"    pm.expect(pm.response.json().users[0]._id).to.be.equal(pm.globals.get(\"lenaaa_id\"));\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"lenaaa_username\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users?username={{lenaaa_username}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "{{lenaaa_username}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get user by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{william_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{william_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users?username=idontexist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "username",
											"value": "idontexist"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "User 3: Put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).username)\r",
											"    .to.be.equal(pm.response.json().username);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"bobson_username\", pm.response.json().username);\r",
											"pm.globals.set(\"bobson_password\", pm.response.json().password);\r",
											"pm.globals.set(\"bobson_bio\", pm.response.json().bio);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"bobsoncool\",\r\n    \"password\": \"bobs_new_password\",\r\n    \"bio\": \"Hi, I am bob\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{bobson_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{bobson_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 3: Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Username is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).username)\r",
											"    .to.be.equal(pm.response.json().username);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"bobson\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{bobson_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{bobson_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User 3: Check updates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is overwritten from the put by the patch\", function () {\r",
											"    pm.expect(pm.globals.get(\"bobson_username\")).to.not.be.equal(pm.response.json().username);\r",
											"})\r",
											"\r",
											"pm.test(\"Password is updated from put\", function () {\r",
											"    pm.expect(pm.globals.get(\"bobson_password\")).to.be.equal(pm.response.json().password);\r",
											"})\r",
											"\r",
											"pm.test(\"There is a bio from put\", function () {\r",
											"    pm.expect(pm.globals.get(\"bobson_bio\")).to.be.equal(pm.response.json().bio);\r",
											"})\r",
											"\r",
											"pm.globals.unset(\"bobson_username\");\r",
											"pm.globals.unset(\"bobson_password\");\r",
											"pm.globals.unset(\"bobson_bio\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{bobson_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{bobson_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"bio\": \"Tjena!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{bobson_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{bobson_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"helloooo\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users/i-dont-exist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"i-dont-exist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "User a: coolguy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"coolguy\",\r\n    \"password\": \"deleteme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User b: verycoolguy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"verycoolguy\",\r\n    \"password\": \"deleteme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "User c: ilikecats",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"ilikecats_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"ilikecats\",\r\n    \"password\": \"dontdeleteme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete users by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All (2) users deleted with password = 'deleteme'\", function () {\r",
											"    pm.expect(pm.response.json().deletedCount).to.be.equal(2);\r",
											"})\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/users?password=deleteme",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users"
									],
									"query": [
										{
											"key": "password",
											"value": "deleteme"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/users/not-a-id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"not-a-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete user by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct user deleted\", function () {\r",
											"    pm.expect(pm.variables.get(\"ilikecats_id\"))\r",
											"    .to.be.equal(pm.response.json()._id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{ilikecats_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{ilikecats_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"ilikecats_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/users/{{ilikecats_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"users",
										"{{ilikecats_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Game",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "Game 1: Maze",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).name)\r",
											"    .to.be.equal(pm.response.json().name);\r",
											"})\r",
											"\r",
											"pm.test(\"Author is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).author)\r",
											"    .to.be.equal(pm.response.json().author);\r",
											"})\r",
											"\r",
											"pm.test(\"Release Date is as requested\", function () {\r",
											"    pm.expect(pm.response.json().releaseDate.split('T').includes(JSON.parse(pm.request.body.raw).releaseDate));\r",
											"})\r",
											"\r",
											"pm.test(\"Tags are as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).tags)\r",
											"    .to.be.equal(pm.response.json().tags);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"game1_id\", pm.response.json()._id);\r",
											"pm.globals.set(\"game1_name\", pm.response.json().name);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Maze\",\r\n    \"author\": \"Team 27\",\r\n    \"releaseDate\": \"2024-01-22\",\r\n    \"tag\": [\r\n        \"Simulator\",\r\n        \"Roleplay\",\r\n        \"Third-person\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game 2: Builder gang",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"game2_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Builder gang\",\r\n    \"author\": \"Team 27\",\r\n    \"releaseDate\": \"2023-10-01\",\r\n    \"tag\": [\r\n        \"Simulator\",\r\n        \"Action\",\r\n        \"Co-op\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game 3: Zonked",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"game3_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Zonked\",\r\n    \"author\": \"04Studios\",\r\n    \"releaseDate\": \"2004-05-03\",\r\n    \"tag\": [\r\n        \"Singleplayer\",\r\n        \"Roleplay\",\r\n        \"Indie\",\r\n        \"Roguelike\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: no name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"author\": \"B0Ent\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: too long name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"The Ultimate Survival Battle where you either survive or get survived; fight for food and queue up with your fake friends who will betray you!\",\r\n    \"author\": \"B0Ent\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: duplicate name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Zonked\",\r\n    \"author\": \"B0Ent\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: no author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill Switch\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: too long author",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill Switch\",\r\n    \"author\": \"The studio that created The Ultimate Survival Battle where you either survive or get survived; fight for food and queue up with your fake friends who will betray you!\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: no releaseDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill Switch\",\r\n    \"author\": \"B0ent\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: incorrect releaseDate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill Switch\",\r\n    \"author\": \"B0ent\",\r\n    \"releaseDate\": \"22-13-2023\",\r\n    \"tag\": [\r\n        \"Action\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: too long tag",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill Swdfdisasdasddsdfdffdsdfdsfdfdftch\",\r\n    \"author\": \"B0Ent\",\r\n    \"releaseDate\": \"2011-05-01\",\r\n    \"tag\": [\r\n        \"Action filled FPS shooter with built-in multiplayer mode 11 111                  1231231\",\r\n        \"First-person\",\r\n        \"Shooter\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: tag missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Kill adfgffsdsaasda\",\r\n    \"author\": \"B0Ent\",\r\n    \"releaseDate\": \"2011-05-01\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Get all games",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns all (3) games\", function () {\r",
											"    pm.expect(pm.response.json().games.length).to.be.equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get game by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"User received by query is correct\", function () {\r",
											"    pm.expect(pm.response.json().games[0]._id).to.be.equal(pm.globals.get(\"game1_id\"));\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"game1_name\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games?name={{game1_name}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									],
									"query": [
										{
											"key": "name",
											"value": "{{game1_name}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get game by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{game1_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{game1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/123",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"123"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games?name=idontexist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									],
									"query": [
										{
											"key": "name",
											"value": "idontexist"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Game 3: Put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).name)\r",
											"    .to.be.equal(pm.response.json().name);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"game3_name\", pm.response.json().name);\r",
											"pm.globals.set(\"game3_author\", pm.response.json().author);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"deknoZ\",\r\n    \"author\": \"04Studios Inc\",\r\n    \"releaseDate\": \"2004-05-03\",\r\n    \"tag\": [\r\n        \"Singleplayer\",\r\n        \"Roleplay\",\r\n        \"Indie\",\r\n        \"Roguelike\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{game3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{game3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game 3: Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).name)\r",
											"    .to.be.equal(pm.response.json().name);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Zonked\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{game3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{game3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game 3: Check updates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is overwritten from the put by the patch\", function () {\r",
											"    pm.expect(pm.globals.get(\"game3_name\")).to.not.be.equal(pm.response.json().name);\r",
											"})\r",
											"\r",
											"pm.test(\"Author is updated from put\", function () {\r",
											"    pm.expect(pm.globals.get(\"game3_author\")).to.be.equal(pm.response.json().author);\r",
											"})\r",
											"\r",
											"pm.globals.unset(\"game3_name\");\r",
											"pm.globals.unset(\"game3_author\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{game3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{game3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"releaseDate\": \"2004-05-03\",\r\n    \"tag\": [\r\n        \"Singleplayer\",\r\n        \"Roleplay\",\r\n        \"Indie\",\r\n        \"Roguelike\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{game3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{game3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Gaming: Vol 3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games/i-dont-exist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"i-dont-exist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Game a: Aspire",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Aspire\",\r\n    \"author\": \"ElevationTM\",\r\n    \"releaseDate\": \"2016-05-01\",\r\n    \"tag\": [\r\n        \"Co-op\",\r\n        \"Sandbox\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game b: Monopoly",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Monopoly\",\r\n    \"author\": \"ElevationTM\",\r\n    \"releaseDate\": \"2019-03-19\",\r\n    \"tag\": [\r\n        \"Strategy\",\r\n        \"Multiplayer\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game c: Deletion",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"gamec_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Deletion\",\r\n    \"author\": \"VoidCorp\",\r\n    \"releaseDate\": \"1999-12-31\",\r\n    \"tag\": [\r\n        \"Singeplayer\",\r\n        \"Open World\",\r\n        \"RPG\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/games",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete games by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All (2) games deleted with author = 'ElevationTM'\", function () {\r",
											"    pm.expect(pm.response.json().deletedCount).to.be.equal(2);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/games?author=ElevationTM",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games"
									],
									"query": [
										{
											"key": "author",
											"value": "ElevationTM"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/games/not-a-id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"not-a-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete game by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct game deleted\", function () {\r",
											"    pm.expect(pm.variables.get(\"gamec_id\"))\r",
											"    .to.be.equal(pm.response.json()._id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{gamec_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{gamec_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"gamec_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/games/{{gamec_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"games",
										"{{gamec_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Review",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "Review 1 - Maze by william",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Game is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).game)\r",
											"    .to.be.equal(pm.response.json().game);\r",
											"})\r",
											"\r",
											"pm.test(\"User is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).user)\r",
											"    .to.be.equal(pm.response.json().user);\r",
											"})\r",
											"\r",
											"pm.test(\"Title is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).title)\r",
											"    .to.be.equal(pm.response.json().title);\r",
											"})\r",
											"\r",
											"pm.test(\"Rating is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).rating)\r",
											"    .to.be.equal(pm.response.json().rating.toString());\r",
											"})\r",
											"pm.test(\"Text is as requested\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).text)\r",
											"    .to.be.equal(pm.response.json().text);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"review1_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game1_id}}\",\r\n    \"user\": \"{{william_id}}\",\r\n    \"title\": \"Game was boring\",\r\n    \"rating\": \"1\",\r\n    \"text\": \"I did not like the game as it was very boring! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Review 2 - Builder Gang by lenaaa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"review2_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\":  \"5\",\r\n    \"title\": \"Very fun!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Review 3 - Zonked by bobson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"review3_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{bobson_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: duplicate review by user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"5\",\r\n    \"title\": \"Actually, it was pretty good\",\r\n    \"text\": \"I had fun with my friends!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing game",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: game",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game123_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{mults_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing rating",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: rating (not a number)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"zero\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: rating (too high)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"31\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game2_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"3\",\r\n    \"text\": \"Not coooooooooooooooooooooooooooooooooooooooooooool!! :(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{bobson_id}}\",\r\n    \"rating\": \"1\",\r\n    \"title\": \"Yesterday I was walking my dog and I saw an old friend of mine who I haven't seen since high school. He looked very sad so I approached him and asked what's wrong. He showed me a copy of this game and told me to avoid buying it at all costs, as it was a big disappoitment and a waste of money. Naturally, I bought the game because I wanted to test his theory. Yep, it's pretty bad. Don't buy it. And then my dog cried.\",\r\n    \"text\": \"Cool story above! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: text",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game1_id}}\",\r\n    \"user\": \"{{william_id}}\",\r\n    \"rating\": \"5\",\r\n    \"title\": \"Crazy?\",\r\n    \"text\": \"Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Get all reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns all (3) reviews\", function () {\r",
											"    pm.expect(pm.response.json().reviews.length).to.be.equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Get review by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Review received by query is correct\", function () {\r",
											"    pm.expect(pm.response.json().reviews[0].user).to.be.equal(pm.globals.get(\"william_id\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews?user={{william_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews"
									],
									"query": [
										{
											"key": "user",
											"value": "{{william_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get review by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review1_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/333",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"333"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews?text=idontexist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews"
									],
									"query": [
										{
											"key": "text",
											"value": "idontexist"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Review 3: isEdited = false",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"isEdited property is false\", function () {\r",
											"    pm.expect(pm.response.json().isEdited).to.be.equal(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review 3: Put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Rating is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).rating)\r",
											"    .to.be.equal(pm.response.json().rating.toString());\r",
											"})\r",
											"\r",
											"pm.test(\"Text is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).text)\r",
											"    .to.be.equal(pm.response.json().text);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"review3_rating\", pm.response.json().rating);\r",
											"pm.globals.set(\"review3_text\", pm.response.json().text);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{bobson_id}}\",\r\n    \"rating\": \"5\",\r\n    \"title\": \"It was alright! OwO\",\r\n    \"text\": \"Very Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Review 3: Patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Rating is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).rating)\r",
											"    .to.be.equal(pm.response.json().rating.toString());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"rating\": \"3\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Game 3: Check updates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Rating is overwritten from the put by the patch\", function () {\r",
											"    pm.expect(pm.globals.get(\"review3_rating\")).to.not.be.equal(pm.response.json().rating);\r",
											"})\r",
											"\r",
											"pm.test(\"Text is updated from put\", function () {\r",
											"    pm.expect(pm.globals.get(\"review3_text\")).to.be.equal(pm.response.json().text);\r",
											"})\r",
											"\r",
											"pm.test(\"isEdited property is true\", function () {\r",
											"    pm.expect(pm.response.json().isEdited).to.be.equal(true);\r",
											"})\r",
											"\r",
											"pm.globals.unset(\"review3_rating\");\r",
											"pm.globals.unset(\"review3_text\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{bobson_id}}\",\r\n    \"text\": \"Very Coooooooooooooooooooooooooooooooooooooooooooool!! :)\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{review3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{review3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"rating\": \"5\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/i-dont-exist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"i-dont-exist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Review a - Zonked by william",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{william_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"cool!\",\r\n    \"text\": \"lorem ipsum\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Review b - Zonked by lenaaa",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game3_id}}\",\r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"cool!\",\r\n    \"text\": \"lorem ipsum\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Review c - Maze by bobson",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"reviewc_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"game\": \"{{game1_id}}\",\r\n    \"user\": \"{{bobson_id}}\",\r\n    \"rating\": \"3\",\r\n    \"title\": \"cool!\",\r\n    \"text\": \"lorem ipsum\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete reviews by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All (2) reviews deleted with game = Maze and title = 'cool!'\", function () {\r",
											"    pm.expect(pm.response.json().deletedCount).to.be.equal(2);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews?game={{game3_id}}&title=cool!",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews"
									],
									"query": [
										{
											"key": "game",
											"value": "{{game3_id}}"
										},
										{
											"key": "title",
											"value": "cool!"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/not-a-id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"not-a-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete review by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct review deleted\", function () {\r",
											"    pm.expect(pm.variables.get(\"reviewc_id\"))\r",
											"    .to.be.equal(pm.response.json()._id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{reviewc_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{reviewc_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"reviewc_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/reviews/{{reviewc_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"reviews",
										"{{reviewc_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Comment",
			"item": [
				{
					"name": "Post",
					"item": [
						{
							"name": "Comment 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"comment1_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{william_id}}\",\r\n    \"review\" : \"{{review2_id}}\",\r\n    \"text\": \"omg you are so right bestie!!! OwO\",\r\n    \"opinion\" : \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"comment2_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"review\" : \"{{review2_id}}\",\r\n    \"text\": \"I disagree! :)\",\r\n    \"opinion\" : \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"comment3_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"i don't like your opinion\",\r\n    \"opinion\" : \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: review missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"text\": \"Cool!\",\r\n    \"opinion\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: invalid review",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\": \"234\",\r\n    \"text\": \"Cool!\",\r\n    \"opinion\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: non-valid user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"aaaaa\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"Hej!\",\r\n    \"opinion\" : true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: text missing",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"opinion\" : false\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: opinion not boolean",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"Nah, not really\",\r\n    \"opinion\" : \"hej\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: text too long",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"opinion\" : \"true\",\r\n    \"text\": \"Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy. Crazy? I was crazy once. They locked me in a room. A rubber room. A rubber room with rats. And rats make me crazy.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Get",
					"item": [
						{
							"name": "Get all comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns all (3) comments\", function () {\r",
											"    pm.expect(pm.response.json().comments.length).to.be.equal(3);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get comments by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Returns all (2) comments with review = review2\", function () {\r",
											"    pm.expect(pm.response.json().comments.length).to.be.equal(2);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments?review={{review2_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									],
									"query": [
										{
											"key": "review",
											"value": "{{review2_id}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get a comment by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment1_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment1_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/notacommentid",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"notacommentid"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found (not crazy)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments?text[in]=crazy?",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									],
									"query": [
										{
											"key": "text[in]",
											"value": "crazy?"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Update",
					"item": [
						{
							"name": "Comment 3: isEdited = false Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"isEdited property is false\", function () {\r",
											"    pm.expect(pm.response.json().isEdited).to.be.equal(false);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment 3: put",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Text is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).text)\r",
											"    .to.be.equal(pm.response.json().text);\r",
											"})\r",
											"\r",
											"pm.globals.set(\"comment3_text\", pm.response.json().text);\r",
											"pm.globals.set(\"comment3_opinion\", pm.response.json().opinion);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"i don't like your opinion or mby i do\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment 3: patch",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Opinion is updated\", function () {\r",
											"    pm.expect(JSON.parse(pm.request.body.raw).opinion)\r",
											"    .to.be.equal(pm.response.json().opinion.toString());\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"opinion\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment 3: Check updates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Name is overwritten from the put by the patch\", function () {\r",
											"    pm.expect(pm.globals.get(\"comment3_opinion\")).to.not.be.equal(pm.response.json().opinion);\r",
											"})\r",
											"\r",
											"pm.test(\"Text is updated from put\", function () {\r",
											"    pm.expect(pm.globals.get(\"comment3_text\")).to.be.equal(pm.response.json().text);\r",
											"})\r",
											"\r",
											"pm.test(\"isEdited property is true\", function () {\r",
											"    pm.expect(pm.response.json().isEdited).to.be.equal(true);\r",
											"})\r",
											"\r",
											"pm.globals.unset(\"comment3_text\");\r",
											"pm.globals.unset(\"comment3_opinion\");\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: missing fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{comment3_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{comment3_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404 not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"hej hej\",\r\n    \"opinion\" : \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/i-dont-exist",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"i-dont-exist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Delete",
					"item": [
						{
							"name": "Comment a",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{william_id}}\",\r\n    \"review\" : \"{{review2_id}}\",\r\n    \"text\": \"deleteme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment b",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.globals.set(\"commentb_id\", pm.response.json()._id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{lenaaa_id}}\",\r\n    \"review\" : \"{{review1_id}}\",\r\n    \"text\": \"dont delete pls\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Comment c",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"user\": \"{{bobson_id}}\",\r\n    \"review\" : \"{{review3_id}}\",\r\n    \"text\": \"deleteme\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/v1/comments",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comments by query",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"All (2) reviews deleted with text = 'deleteme\", function () {\r",
											"    pm.expect(pm.response.json().deletedCount).to.be.equal(2);\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments?text=deleteme",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments"
									],
									"query": [
										{
											"key": "text",
											"value": "deleteme"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: _id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/not-a-id",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"not-a-id"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete comment by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct comment deleted\", function () {\r",
											"    pm.expect(pm.variables.get(\"commentb_id\"))\r",
											"    .to.be.equal(pm.response.json()._id);\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{commentb_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{commentb_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid: 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.globals.unset(\"commentb_id\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/comments/{{commentb_id}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"comments",
										"{{commentb_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Method Override",
			"item": [
				{
					"name": "User: MethodOverride",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"MethodOverride_id\", pm.response.json()._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"MethodOverride\",\r\n    \"password\": \"_method\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Override: Put",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Uses method overriding (_method=PUT)\", function () {\r",
									"    pm.expect(pm.request.url.getQueryString()).to.be.equal(\"_method=PUT\");\r",
									"});\r",
									"\r",
									"pm.test(\"Username is updated\", function () {\r",
									"    pm.expect(JSON.parse(pm.request.body.raw).username)\r",
									"    .to.be.equal(pm.response.json().username);\r",
									"})\r",
									"\r",
									"pm.globals.set(\"MethodOverride_username\", pm.response.json().username);\r",
									"pm.globals.set(\"MethodOverride_password\", pm.response.json().password);\r",
									"pm.globals.set(\"MethodOverride_bio\", pm.response.json().bio);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"MethodOverride1\",\r\n    \"password\": \"_method\",\r\n    \"bio\": \"I overwrite methods\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users/{{MethodOverride_id}}/?_method=PUT",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{MethodOverride_id}}",
								""
							],
							"query": [
								{
									"key": "_method",
									"value": "PUT"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Override: Patch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Uses method overriding (_method=PATCH)\", function () {\r",
									"    pm.expect(pm.request.url.getQueryString()).to.be.equal(\"_method=PATCH\");\r",
									"});\r",
									"\r",
									"pm.test(\"Username is updated\", function () {\r",
									"    pm.expect(JSON.parse(pm.request.body.raw).username)\r",
									"    .to.be.equal(pm.response.json().username);\r",
									"})\r",
									"\r",
									"pm.globals.set(\"MethodOverride_username\", pm.response.json().username);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"MethodOverride\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users/{{MethodOverride_id}}/?_method=PATCH",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{MethodOverride_id}}",
								""
							],
							"query": [
								{
									"key": "_method",
									"value": "PATCH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check updates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Uses method overriding (_method=GET)\", function () {\r",
									"    pm.expect(pm.request.url.getQueryString()).to.be.equal(\"_method=GET\");\r",
									"});\r",
									"\r",
									"pm.test(\"Name is overwritten from the put by the patch\", function () {\r",
									"    pm.expect(pm.globals.get(\"MethodOverride_username\")).to.be.equal(pm.response.json().username);\r",
									"})\r",
									"\r",
									"pm.test(\"Password is updated from put\", function () {\r",
									"    pm.expect(pm.globals.get(\"MethodOverride_password\")).to.be.equal(pm.response.json().password);\r",
									"})\r",
									"\r",
									"pm.test(\"There is a bio from put\", function () {\r",
									"    pm.expect(pm.globals.get(\"MethodOverride_bio\")).to.be.equal(pm.response.json().bio);\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users/{{MethodOverride_id}}/?_method=GET",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{MethodOverride_id}}",
								""
							],
							"query": [
								{
									"key": "_method",
									"value": "GET"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Method Override: Delete by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Uses method overriding (_method=DELETE)\", function () {\r",
									"    pm.expect(pm.request.url.getQueryString()).to.be.equal(\"_method=DELETE\");\r",
									"});\r",
									"\r",
									"pm.test(\"Correct user deleted\", function () {\r",
									"    pm.expect(pm.variables.get(\"MethodOverride_id\"))\r",
									"    .to.be.equal(pm.response.json()._id);\r",
									"})\r",
									"\r",
									"pm.globals.unset(\"MethodOverride_id\");\r",
									"pm.globals.unset(\"MethodOverride_username\");\r",
									"pm.globals.unset(\"MethodOverride_password\");\r",
									"pm.globals.unset(\"MethodOverride_bio\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/users/{{MethodOverride_id}}/?_method=DELETE",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"{{MethodOverride_id}}",
								""
							],
							"query": [
								{
									"key": "_method",
									"value": "DELETE"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filtering & Sorting",
			"item": [
				{
					"name": "Returns only username (and _id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user = pm.response.json().users[0];\r",
									"pm.test(\"Only username (and _id) returned\", function () {\r",
									"    pm.expect(user._id).to.exist;\r",
									"    pm.expect(user.username).to.exist;\r",
									"    pm.expect(user.password).to.not.exist;\r",
									"    pm.expect(user.bio).to.not.exist;\r",
									"    pm.expect(user.following).to.not.exist;\r",
									"    pm.expect(user.pinnedReview).to.not.exist;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/users/?_id={{william_id}}&fields=username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "_id",
									"value": "{{william_id}}"
								},
								{
									"key": "fields",
									"value": "username"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by ascending username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user = pm.response.json().users;\r",
									"pm.test(\"Returned in ascending order\", function () {\r",
									"    pm.expect(user[0].username).to.be.equal(\"bobson\");\r",
									"    pm.expect(user[1].username).to.be.equal(\"lenaaa\");\r",
									"    pm.expect(user[2].username).to.be.equal(\"william\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/users/?fields=username&sort=+username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "fields",
									"value": "username"
								},
								{
									"key": "sort",
									"value": "+username"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Sort by descending username Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var user = pm.response.json().users;\r",
									"pm.test(\"Returned in descending order\", function () {\r",
									"    pm.expect(user[2].username).to.be.equal(\"bobson\");\r",
									"    pm.expect(user[1].username).to.be.equal(\"lenaaa\");\r",
									"    pm.expect(user[0].username).to.be.equal(\"william\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/users/?fields=username&sort=-username",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							],
							"query": [
								{
									"key": "fields",
									"value": "username"
								},
								{
									"key": "sort",
									"value": "-username"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Relationship methods",
			"item": [
				{
					"name": "Get comments from review",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Get all (2) comments from review2\", function () {\r",
									"    pm.expect(pm.response.json().comments.length).to.be.equal(2);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews/{{review2_id}}/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								"{{review2_id}}",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get comments from review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews/{{review2_id}}/comments/{{comment1_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								"{{review2_id}}",
								"comments",
								"{{comment1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete comment from review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews/{{review2_id}}/comments/{{comment1_id}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								"{{review2_id}}",
								"comments",
								"{{comment1_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post comment from review by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"user\": \"{{william_id}}\",\r\n    \"text\": \"that seems about right\",\r\n    \"opinion\" : \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews/{{review2_id}}/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								"{{review2_id}}",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cascade Deletion",
			"item": [
				{
					"name": "Delete all reviews",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "All comments cascade deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all games",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/games",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"games"
							]
						}
					},
					"response": []
				},
				{
					"name": "All reviews cascade deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/reviews",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"reviews"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}